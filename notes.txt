use sequences, default, views, constraints, on update/delete cascade whereever possible.

Whenever you wanna only match column(s) of same name between tables in join, use `USING (common_col1, common_col2)`. USING lets us use common_col1 without mentioning table name unlike ON. Unfortunately ON and USING can't be used together. Never use natural join as it can go wrong when adding new same-name column in both table.

Syntactically, it's mandatory to give alias to every subquery.

where works before group but order by after grouping so you may have to give all parameters of order by in group by as well.
Aggregates can't be used in where (possible in having), so u must return it from subquery itself or use join. Group by is must to use aggregate with join.
Aggregates don't support composite type, you need nested group by using something like where (col1, col2) in (subquery). It may be a better idea to use order by instead.
To keep only one equal row after order by, use distinct on in postgresql. This is not part of standard sql, but it's quite hard to do otherwise.
column alias can't be referred to in where & group by as those are executed before select, use `with alias as (query)` for workaround. BUT mysql and postgresql has additional smartness that allows it.
use inner/left join instead of cartesian/cross join as much as possible, be careful of null & use distinct (or distinct on) in join,
In from, you have to directly give alias to subqueries to join. In other places, use `with alias as (query)` to give alias to subquery to use it more than once anywhere later.
Even after join a, b u can access a.c, b.d.
select only some columns in join: select  table1.*, table2.col1, table2.col2

It's possible to use aggregate in order by without using alias.
sql has case statement whereas mysql has if(condition, true-value, false-value). postgresql case statement example:

```sql
SELECT field1, field2,
  CASE
    WHEN field1>0 THEN field2/field1
    ELSE 0
  END 
  AS field3
FROM test
```

Look for window functions, these need nesting for using where with them (where in the outer nest, window function in the inner nest):
select * from () q1 WHERE condition doesn't preserve order of q1.
Get rank (number of people worse than you + 1) in postgresql:

```sql
select *
from (
         select *, rank() over (order by total_score desc)
         from (
                  select user_id, sum(score) total_score
                  from (
                           select user_id, max(score) score
                           from challenge_results
                           group by user_id, challenge_id) q1
                  group by user_id) q2) q3
where user_id > 1 order by total_score desc;
```


Get row number in postgresql:

```sql
select *
from (
         select *, row_number() over () rank
         from (
                  select user_id, sum(score) total_score
                  from (
                           select user_id, max(score) score
                           from challenge_results
                           group by user_id, challenge_id) q1
                  group by user_id
                  order by total_score desc) q2) q3
where user_id > 1 order by total_score desc;
```

Look for between operator and between symmetric operator, greatest, least, coalesce/nvl/ifnull.
Cursor for loop does only fetch, it can't be used directly for updating row.
exit means break in pl[pg]sql.

select...into creates new table in postgresql unlike pl[pg]sql where it stores values into variables, use create...as to create new table in postgresql instead, which is standard (present int oracle/mysql).

is NULL is equilvant to is UNKNOWN in case of boolean.
Ordinary comparison operators yield null (signifying "unknown"), not true or false, when either input is null. For example, 7 = NULL yields null, as does 7 <> NULL. When this behavior is not suitable, use the IS [ NOT ] DISTINCT FROM constructs:
a IS DISTINCT FROM b
a IS NOT DISTINCT FROM b

return inserted/modified rows using returning *

`values` which is used in insert can also be used as a subquery, it basically creates a constant not-in-storage table. It can also be used in join using alias as table_name(column1_name, column2_name, ...).

Subqueries appearing in FROM can be preceded by the key word LATERAL. This allows them to reference columns provided by preceding FROM items. (Without LATERAL, each subquery is evaluated independently and so cannot cross-reference any other FROM item.)
Table functions appearing in FROM can also be preceded by the key word LATERAL, but for functions the key word is optional; the function's arguments can contain references to columns provided by preceding FROM items in any case.
A LATERAL item can appear at top level in the FROM list, or within a JOIN tree. In the latter case it can also refer to any items that are on the left-hand side of a JOIN that it is on the right-hand side of.

in postgresql c.name is equivalent to name(c), so be careful of ambiguity in function name!!!

In PLSQL (unlike plpgsql), if exists is not allowed, use select...into there
In postgresql, if you are ready to settle for json, there is a way to select all columns except some (from frontend intercept by [{submissions}]):

```sql
select jsonb_agg(to_jsonb(q) - 'opponent_id' - 'challenge_id') submissions
from (select *
        from challenge_results
        where challenge_id = ${req.params.problemid}
        order by time desc) q;
```

see ur sql old online solutions for more.
